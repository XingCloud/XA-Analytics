- javascript "backbone_bundle"
- stylesheet "reports"

= simple_form_for @report, :as => :report, :url => @report.persisted? ? template_report_path(@report) : template_reports_path(), :html => { :method => @report.persisted? ? "put" : "post", :class => "form-horizontal"} do |f|
  .page-header
    %h3 
      一般信息
      %small 填写报告目的，和报告说明
  .form-stacked

    %fieldset
      .row
        .span6
          = f.input :title
          = f.input :type do
            = f.hidden_field :type
            #report_types.btn-group

          = f.input :metrics do
            .well.metrics{:style => "float:left"}
              = hidden_field_tag "report[metric_ids][]", ""
              #metric_list
              .action-add{:"data-popup" => "width:800px;", :title => "添加指标", :href => new_template_metric_path(:report_type => "line")}
                + 添加指标
          = f.input :description, :as => :text, :input_html => {:style => "width: 300px; height: 200px"}
        .span7
          %h4
            标题 目的和描述
          %p
            目的和描述会显示在报告的右侧
          
  .page-header
    %h3
      周期与频率
      %small 填写报告 默认周期与频率
  .form-stacked
    = f.fields_for :period do |period|
      = period.input :rule, :collection => translate_collection(Period::RULES, :scope => "period")
      = period.input :rate, :collection => translate_collection(Period::RATES, :scope => "period")
      = period.input :compare_number
  
      
  .form-actions
    = f.submit "提交", :class => "btn btn-primary"
    = link_to "取消", template_reports_path(), :class => "btn"

= include_js_template :metric_view
= javascript_include_tag "models/metric.js", "models/report_type.js"
:javascript

  var metric_data = #{@report.metrics.map(&:short_attributes).to_json }
  var report_types = #{Report.subclasses.map{|subclass| {:selected => @report.class == subclass,:name => subclass.name, :human_name => subclass.model_name.human, :type_name => subclass.type_name} }.to_json}

  $(function() {

    _.each(report_types, function(rt) {
      ReportTypes.add(new ReportType(rt));
    });

    _.each(metric_data, function(m) {
      Metrics.add(new Metric(m))
    });

  })